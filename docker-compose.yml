

services:

  # --- INFRASTRUCTURE SERVICES ---

  postgres:
    image: postgres:14.1-alpine
    container_name: postgres-db
    ports:
      # Format: "HOST:CONTAINER"
      - "5433:5432"
    environment:
      - POSTGRES_DB=athletes_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Aadi9027
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d athletes_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    # Allow lightweight 4lw commands if you ever want them
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: ruok,stat,srvr
    healthcheck:
       
    # zookeeper-shell exits 0 when it can query ZK
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/commands/ruok | grep -q '\"error\"\\s*:\\s*null'"]

      interval: 10s
      timeout: 5s
      retries: 5


  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      # IMPORTANT: Use 'kafka:29092' for inter-container communication
      # Use 'localhost:9092' for local machine access
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 5

  # --- CORE SPRING CLOUD SERVICES ---

  discovery-server:
    build: ./discovery-server
    container_name: discovery-server
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8761/actuator/health | grep -q '\"status\"\\s*:\\s*\"UP\"'"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "9090:9090"
    depends_on:
      discovery-server:
        condition: service_healthy
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka

  # --- FEATURE MICROSERVICES (Alphabetical Order) ---

  ai-coach-service:
    build: ./ai-coach-service
    container_name: ai-coach-service
    depends_on:
      discovery-server:
        condition: service_healthy
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - GROQ_API_KEY=${GROQ_API_KEY}

  analytics-service:
    build: ./analytics-service
    container_name: analytics-service
    depends_on:
      discovery-server: { condition: service_healthy }
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/athletes_db
      - SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS=kafka:29092

  gamification-service:
    build: ./gamification-service
    container_name: gamification-service
    depends_on:
      discovery-server: { condition: service_healthy }
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/athletes_db
      - SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS=kafka:29092

  goal-service:
    build: ./goal-service
    container_name: goal-service
    depends_on:
      discovery-server: { condition: service_healthy }
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/athletes_db
      - SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS=kafka:29092
      - SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS=kafka:29092

  injury-prediction-service:
    build: ./injury-prediction-service
    container_name: injury-prediction-service
    depends_on:
      discovery-server: { condition: service_healthy }
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/athletes_db
      - SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS=kafka:29092
      - SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS=kafka:29092

  notification-service:
    build: ./notification-service
    container_name: notification-service
    depends_on:
      discovery-server: { condition: service_healthy }
      kafka: { condition: service_healthy }
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS=kafka:29092

  nutrition-service:
    build: ./nutrition-service
    container_name: nutrition-service
    depends_on:
      discovery-server: { condition: service_healthy }
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/athletes_db
      - SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS=kafka:29092

  planner-service:
    build: ./planner-service
    container_name: planner-service
    depends_on:
      discovery-server: { condition: service_healthy }
      postgres: { condition: service_healthy }
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/athletes_db

  pr-service:
    build: ./pr-service
    container_name: pr-service
    depends_on:
      discovery-server: { condition: service_healthy }
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/athletes_db
      - SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS=kafka:29092

  recovery-service:
    build: ./recovery-service
    container_name: recovery-service
    depends_on:
      discovery-server: { condition: service_healthy }
      postgres: { condition: service_healthy }
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/athletes_db

  timeline-service:
    build: ./timeline-service
    container_name: timeline-service
    depends_on:
      discovery-server: { condition: service_healthy }
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka

  user-service:
    build: ./user-service
    container_name: user-service
    depends_on:
      discovery-server: { condition: service_healthy }
      postgres: { condition: service_healthy }
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/athletes_db

  workout-logger-service:
    build: ./workout-logger-service
    container_name: workout-logger-service
    depends_on:
      discovery-server: { condition: service_healthy }
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/athletes_db
      - SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS=kafka:29092

  # --- FRONTEND SERVICE ---

  frontend:
    build: ./frontend
    container_name: frontend-ui
    ports:
      - "3000:80"
    depends_on:
      api-gateway:
        condition: service_started

# --- VOLUMES ---
volumes:
  postgres_data:

